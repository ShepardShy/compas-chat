{
  "resolvedId": "D:/Work/compas-chat/components/chat/DialogBody/DialogBody.vue?vue&type=style&index=0&scoped=f0b4b62e&lang.scss",
  "transforms": [
    {
      "name": "vite:vue",
      "result": "\r\n@import './DialogBody.scss';\r\n",
      "start": 1709273111507,
      "end": 1709273111507,
      "sourcemaps": {
        "version": 3,
        "sources": [
          "D:/Work/compas-chat/components/chat/DialogBody/DialogBody.vue"
        ],
        "names": [],
        "mappings": ";AA8PA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC",
        "file": "D:/Work/compas-chat/components/chat/DialogBody/DialogBody.vue",
        "sourceRoot": "",
        "sourcesContent": [
          "<script setup lang=\"ts\">\r\nimport { nextTick } from 'vue'\r\nimport ChatInput from '~/components/chat/ui/ChatInput.vue'\r\nimport SendMsgIcon from '~/assets/icons/send-msg-icon.svg'\r\nimport MicrophoneIcon from '~/assets/icons/microphone-icon.svg'\r\nimport { useUsersStore } from '~/store/users'\r\nimport OwnMessage from '~/components/chat/OwnMessage/OwnMessage.vue'\r\nimport OtherMessage from '~/components/chat/OtherMessage/OtherMessage.vue'\r\nimport VoiceMessage from '~/components/chat/VoiceMessage/VoiceMessage.vue'\r\nimport { useSettingsStore } from '~/store/settings'\r\n\r\nconst usersStore = useUsersStore()\r\nconst { openedChatData, userId, openedChatId } = storeToRefs(usersStore)\r\n\r\nconst settingsStore = useSettingsStore()\r\nconst { isMobileSize } = storeToRefs(settingsStore)\r\n\r\nconst messageValue = ref<string>()\r\n\r\nconst messageType = ref<'text' | 'voice'>('text')\r\n\r\nconst setMessageType = () => {\r\n  // чтобы разделить срабатывание click и dbclick\r\n  clearTimeout(oneClickTimer)\r\n  clearTimeout(oneClickTimer - 1)\r\n\r\n  if (isMakingAVoiceMessage.value) return\r\n\r\n  if (messageType.value === 'text') {\r\n    messageType.value = 'voice'\r\n  } else if (messageType.value === 'voice') {\r\n    messageType.value = 'text'\r\n  }\r\n}\r\n\r\nconst $dialogBody = ref<HTMLDivElement>()\r\nconst $dialogWrapper = ref<HTMLDivElement>()\r\nconst $dialogActions = ref<HTMLDivElement>()\r\n\r\nconst isDialogBodyHeightsLessThenVH = ref(true)\r\n\r\nconst scrollToDialogWrapperBottom = () => {\r\n  $dialogWrapper.value.scrollTop = $dialogWrapper.value.scrollHeight\r\n}\r\n\r\nconst checkIfDialogBodyHeightsLessThenVH = async () => {\r\n  await nextTick()\r\n  const dialogBodyHeight = $dialogBody.value.offsetHeight\r\n  const dialogWrapperHeight = $dialogWrapper.value.offsetHeight\r\n\r\n  isDialogBodyHeightsLessThenVH.value = (dialogBodyHeight < dialogWrapperHeight)\r\n}\r\n\r\nconst isMakingAVoiceMessage = ref(false)\r\nconst voiceMessage = ref([])\r\nlet doNotSaveVoiceMessage = false\r\n\r\nconst setVoiceMessage = async (isStarted: boolean, cleanMessage: boolean = false) => {\r\n  if (cleanMessage) {\r\n    doNotSaveVoiceMessage = true\r\n  }\r\n\r\n  isMakingAVoiceMessage.value = isStarted\r\n  await startRecord()\r\n}\r\n\r\nlet chunks = []\r\nlet mediaRecorder = null\r\nlet audioBlob = null\r\nlet startTime\r\nconst messageDuration = ref(0)\r\nlet messageIntervalId\r\n\r\nasync function startRecord () {\r\n  if (!navigator.mediaDevices && !navigator.mediaDevices.getUserMedia) {\r\n    return console.warn('Not supported')\r\n  }\r\n\r\n  if (!mediaRecorder) {\r\n    try {\r\n      const stream = await navigator.mediaDevices.getUserMedia({\r\n        audio: true\r\n      })\r\n      mediaRecorder = new MediaRecorder(stream)\r\n      mediaRecorder.start()\r\n\r\n      startTime = new Date().getTime()\r\n\r\n      mediaRecorder.ondataavailable = (e) => {\r\n        chunks.push(e.data)\r\n      }\r\n\r\n      messageIntervalId = setInterval(() => messageDuration.value = (new Date().getTime() - startTime) / 1000, 1000)\r\n\r\n      mediaRecorder.onstop = mediaRecorderStop\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  } else {\r\n    mediaRecorder.stop()\r\n    clearInterval(messageIntervalId)\r\n    messageDuration.value = 0\r\n  }\r\n}\r\n\r\nfunction mediaRecorderStop () {\r\n  audioBlob = new Blob(chunks, { type: 'audio/mp3' })\r\n  const src = URL.createObjectURL(audioBlob)\r\n\r\n  if (doNotSaveVoiceMessage) {\r\n    voiceMessage.value = []\r\n  } else {\r\n    voiceMessage.value = [src]\r\n  }\r\n\r\n  mediaRecorder = null\r\n  chunks = []\r\n}\r\n\r\nconst sendTextMessage = () => {\r\n}\r\n\r\nlet oneClickTimer\r\n\r\nconst handleMessage = () => {\r\n  oneClickTimer = setTimeout(() => {\r\n    if (messageType.value === 'text') {\r\n      sendTextMessage()\r\n    } else if (messageType.value === 'voice') {\r\n      if (isMakingAVoiceMessage.value) {\r\n        setVoiceMessage(false)\r\n      } else {\r\n        setVoiceMessage(true)\r\n      }\r\n    }\r\n  }, 300)\r\n}\r\n\r\nonMounted(async () => {\r\n  await checkIfDialogBodyHeightsLessThenVH()\r\n  scrollToDialogWrapperBottom()\r\n})\r\n\r\nwatch(\r\n  () => openedChatId.value,\r\n  async () => {\r\n    await checkIfDialogBodyHeightsLessThenVH()\r\n    scrollToDialogWrapperBottom()\r\n  }\r\n)\r\n\r\nconst checkIfLastOfSeveralMessages = (idx: string | number): boolean => {\r\n  const messages = openedChatData.value!.messages\r\n  if (messages[idx + 1]) {\r\n    return messages[idx].userId !== messages[idx + 1].userId\r\n  } else {\r\n    return true\r\n  }\r\n}\r\n\r\nconst deleteMessage = (messageIdx) => {\r\n  voiceMessage.value = voiceMessage.value.splice(messageIdx, -1)\r\n}\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    class=\"dialog\"\r\n    :class=\"{\r\n      'dialog_mobile': isMobileSize\r\n    }\"\r\n  >\r\n    <div\r\n      ref=\"$dialogWrapper\"\r\n      class=\"dialog__wrapper\"\r\n      :class=\"{\r\n        'dialog__wrapper_flex': isDialogBodyHeightsLessThenVH\r\n      }\"\r\n    >\r\n      <div\r\n        ref=\"$dialogBody\"\r\n        class=\"dialog__body\"\r\n      >\r\n        <div\r\n          v-for=\"(message, idx) in openedChatData.messages\"\r\n          :key=\"message.id\"\r\n          class=\"dialog__message\"\r\n          :style=\"{\r\n            alignSelf: message.userId == userId ? 'flex-end' : 'flex-start',\r\n            marginBottom: openedChatData.messages.length - 1 === idx && '5px'\r\n          }\"\r\n        >\r\n          <OwnMessage\r\n            v-if=\"message.userId === userId\"\r\n            :message=\"message\"\r\n            :last-of-several-msgs=\"checkIfLastOfSeveralMessages(idx)\"\r\n          />\r\n\r\n          <OtherMessage\r\n            v-else\r\n            :message=\"message\"\r\n            :last-of-several-msgs=\"checkIfLastOfSeveralMessages(idx)\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <VoiceMessage\r\n      v-if=\"voiceMessage.length\"\r\n      class=\"dialog__voice\"\r\n      :is-own-message=\"true\"\r\n      date=\"12:01:2024 14:15\"\r\n      :is-received=\"true\"\r\n      :is-viewed=\"true\"\r\n      :audio-message=\"voiceMessage[0]\"\r\n      @delete-message=\"deleteMessage(0)\"\r\n    />\r\n\r\n    <div\r\n      ref=\"$dialogActions\"\r\n      class=\"dialog__actions\"\r\n    >\r\n      <ChatInput\r\n        v-model:input-value=\"messageValue\"\r\n        class=\"dialog__input\"\r\n        placeholder=\"Напишите сообщение…\"\r\n        :add-documents=\"true\"\r\n        :is-making-a-voice-message=\"isMakingAVoiceMessage\"\r\n        :message-duration=\"messageDuration\"\r\n      />\r\n\r\n      <div\r\n        class=\"dialog__send-msg\"\r\n        :class=\"{\r\n          'dialog__send-msg_active': isMakingAVoiceMessage,\r\n        }\"\r\n        @dblclick=\"setMessageType\"\r\n        @click=\"handleMessage\"\r\n      >\r\n        <SendMsgIcon v-if=\"messageType === 'text' || isMakingAVoiceMessage\" />\r\n\r\n        <MicrophoneIcon v-if=\"messageType === 'voice' && !isMakingAVoiceMessage\" />\r\n      </div>\r\n    </div>\r\n\r\n    <div\r\n      v-if=\"isMakingAVoiceMessage\"\r\n      class=\"dialog__voice-bg\"\r\n      @click=\"setVoiceMessage(false, true)\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<style scoped lang=\"scss\">\r\n@import './DialogBody.scss';\r\n</style>\r\n"
        ]
      }
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1709273111507,
      "end": 1709273111507,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1709273111507,
      "end": 1709273111507,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1709273111507,
      "end": 1709273111507,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1709273111507,
      "end": 1709273111507,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1709273111507,
      "end": 1709273111507,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "result": ".dialog{background-color:#fbfcfd;border-top:1px solid #eeeff1;display:flex;flex-direction:column;height:calc(100vh - 105px);padding:10px 50px 25px 25px}.dialog_mobile{padding:15px 15px 25px 10px}.dialog__wrapper{flex:1 1 auto;margin-bottom:60px;overflow-y:auto}.dialog__wrapper::-webkit-scrollbar{height:122px;width:3px}.dialog__wrapper::-webkit-scrollbar-thumb{background-color:#a6b7d4;border-radius:2px}.dialog__wrapper::-webkit-scrollbar-track{background-color:transparent}.dialog__wrapper_flex{align-items:flex-end}.dialog__body,.dialog__wrapper_flex{display:flex;justify-content:flex-end}.dialog__body{flex:1 1 auto;flex-direction:column}.dialog__actions{align-items:flex-end;display:flex;flex:0 0 50px;gap:10px}.dialog__input{flex:1 1 auto}.dialog__send-msg{align-items:center;background-color:#a6b7d4;border-radius:40px;color:#fff;cursor:pointer;display:flex;flex:0 0 40px;height:40px;justify-content:center;position:relative;transition:all .5s;width:40px;z-index:150}.dialog__send-msg:active{background-color:#a6b7d4;opacity:.6}.dialog__send-msg_active{animation:pulse 1s infinite;background-color:#ad0b0a}@keyframes pulse{0%{transform:scale(1)}50%{transform:scale(1.1)}to{transform:scale(1)}}.dialog__voice-bg{background-color:transparent;bottom:0;left:0;position:fixed;right:0;top:0;z-index:100}.dialog__voice{align-self:flex-end;width:400px}",
      "start": 1709273111507,
      "end": 1709273111637,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "file": "D:/Work/compas-chat/components/chat/DialogBody/DialogBody.vue",
        "mappings": "AAEA,QAIE,wBCiBgB,CDnBhB,6BAGA,aACA,sBALA,2BAEA,4BAMF,eACE,4BAGF,iBACE,cACA,mBACA,gBAEA,oCAEE,aADA,UAIF,0CACE,wBCTc,CDUd,kBAGF,0CACE,6BAIJ,sBAGE,qBAGF,oCALE,aACA,yBAIF,cACE,cAEA,sBAIF,iBAIE,qBAFA,aADA,cAEA,SAIF,eACE,cAGF,kBAUE,mBALA,wBC/CgB,CD8ChB,mBAGA,WADA,eAEA,aAPA,cAEA,YAMA,uBAEA,kBAEA,mBAXA,WAUA,YAIF,yBACE,wBC3DgB,CD4DhB,WAGF,yBAEE,4BADA,yBAIF,iBACE,GACE,mBAEF,IACE,qBAEF,GACE,oBAIJ,kBAOE,6BAJA,SAEA,OAJA,eAGA,QAFA,MAIA,YAIF,eAEE,oBADA",
        "names": [],
        "sources": [
          "D:/Work/compas-chat/components/chat/DialogBody/DialogBody.scss",
          "D:/Work/compas-chat/assets/styles/_variables.scss"
        ],
        "sourcesContent": [
          null,
          null
        ]
      }
    },
    {
      "name": "vite:esbuild",
      "start": 1709273111637,
      "end": 1709273111637,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1709273111637,
      "end": 1709273111637,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1709273111637,
      "end": 1709273111637,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "result": ".dialog[data-v-f0b4b62e]{background-color:#fbfcfd;border-top:1px solid #eeeff1;display:flex;flex-direction:column;height:calc(100vh - 105px);padding:10px 50px 25px 25px}.dialog_mobile[data-v-f0b4b62e]{padding:15px 15px 25px 10px}.dialog__wrapper[data-v-f0b4b62e]{flex:1 1 auto;margin-bottom:60px;overflow-y:auto}.dialog__wrapper[data-v-f0b4b62e]::-webkit-scrollbar{height:122px;width:3px}.dialog__wrapper[data-v-f0b4b62e]::-webkit-scrollbar-thumb{background-color:#a6b7d4;border-radius:2px}.dialog__wrapper[data-v-f0b4b62e]::-webkit-scrollbar-track{background-color:transparent}.dialog__wrapper_flex[data-v-f0b4b62e]{align-items:flex-end}.dialog__body[data-v-f0b4b62e],.dialog__wrapper_flex[data-v-f0b4b62e]{display:flex;justify-content:flex-end}.dialog__body[data-v-f0b4b62e]{flex:1 1 auto;flex-direction:column}.dialog__actions[data-v-f0b4b62e]{align-items:flex-end;display:flex;flex:0 0 50px;gap:10px}.dialog__input[data-v-f0b4b62e]{flex:1 1 auto}.dialog__send-msg[data-v-f0b4b62e]{align-items:center;background-color:#a6b7d4;border-radius:40px;color:#fff;cursor:pointer;display:flex;flex:0 0 40px;height:40px;justify-content:center;position:relative;transition:all .5s;width:40px;z-index:150}.dialog__send-msg[data-v-f0b4b62e]:active{background-color:#a6b7d4;opacity:.6}.dialog__send-msg_active[data-v-f0b4b62e]{animation:pulse-f0b4b62e 1s infinite;background-color:#ad0b0a}@keyframes pulse-f0b4b62e{0%{transform:scale(1)}50%{transform:scale(1.1)}to{transform:scale(1)}}.dialog__voice-bg[data-v-f0b4b62e]{background-color:transparent;bottom:0;left:0;position:fixed;right:0;top:0;z-index:100}.dialog__voice[data-v-f0b4b62e]{align-self:flex-end;width:400px}",
      "start": 1709273111641,
      "end": 1709273111644,
      "order": "normal",
      "sourcemaps": {
        "file": "D:/Work/compas-chat/components/chat/DialogBody/DialogBody.vue",
        "mappings": "AAAA,yBAAQ,wBAAwB,CAAC,4BAA4B,CAAC,YAAY,CAAC,qBAAqB,CAAC,0BAA0B,CAAC,2BAA2B,CAAC,gCAAe,2BAA2B,CAAC,kCAAiB,aAAa,CAAC,kBAAkB,CAAC,eAAe,CAAC,qDAAoC,YAAY,CAAC,SAAS,CAAC,2DAA0C,wBAAwB,CAAC,iBAAiB,CAAC,2DAA0C,4BAA4B,CAAC,uCAAsB,oBAAoB,CAAC,sEAAoC,YAAY,CAAC,wBAAwB,CAAC,+BAAc,aAAa,CAAC,qBAAqB,CAAC,kCAAiB,oBAAoB,CAAC,YAAY,CAAC,aAAa,CAAC,QAAQ,CAAC,gCAAe,aAAa,CAAC,mCAAkB,kBAAkB,CAAC,wBAAwB,CAAC,kBAAkB,CAAC,UAAU,CAAC,cAAc,CAAC,YAAY,CAAC,aAAa,CAAC,WAAW,CAAC,sBAAsB,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,UAAU,CAAC,WAAW,CAAC,0CAAyB,wBAAwB,CAAC,UAAU,CAAC,0CAAyB,oCAA2B,CAAC,wBAAwB,CAAC,0BAAiB,GAAG,kBAAkB,CAAC,IAAI,oBAAoB,CAAC,GAAG,kBAAkB,CAAC,CAAC,mCAAkB,4BAA4B,CAAC,QAAQ,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,gCAAe,mBAAmB,CAAC,WAAW",
        "names": [],
        "sources": [
          "D:/Work/compas-chat/components/chat/DialogBody/DialogBody.vue"
        ],
        "sourcesContent": [
          null
        ],
        "version": 3
      }
    },
    {
      "name": "vite:vue-jsx",
      "start": 1709273111644,
      "end": 1709273111644,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709273111644,
      "end": 1709273111644,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709273111644,
      "end": 1709273111644,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1709273111644,
      "end": 1709273111644,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1709273111644,
      "end": 1709273111644,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1709273111644,
      "end": 1709273111644,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709273111645,
      "end": 1709273111645,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1709273111645,
      "end": 1709273111645,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1709273111645,
      "end": 1709273111645,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "result": "",
      "start": 1709273111645,
      "end": 1709273111645,
      "order": "normal",
      "sourcemaps": {
        "mappings": ""
      }
    },
    {
      "name": "vite:build-html",
      "start": 1709273111645,
      "end": 1709273111645,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1709273111645,
      "end": 1709273111645,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1709273111645,
      "end": 1709273111645,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1709273111645,
      "end": 1709273111645,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1709273111645,
      "end": 1709273111645,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1709273111645,
      "end": 1709273111645,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1709273111645,
      "end": 1709273111645,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1709273111645,
      "end": 1709273111645,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1709273111645,
      "end": 1709273111645,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1709273111645,
      "end": 1709273111645,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1709273111645,
      "end": 1709273111645,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1709273111645,
      "end": 1709273111645,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1709273111646,
      "end": 1709273111646,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1709273111646,
      "end": 1709273111646,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1709273111646,
      "end": 1709273111646,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1709273111646,
      "end": 1709273111646,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1709273111648,
      "end": 1709273111648,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1709273111648,
      "end": 1709273111648,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1709273111648,
      "end": 1709273111648,
      "order": "normal"
    }
  ]
}
